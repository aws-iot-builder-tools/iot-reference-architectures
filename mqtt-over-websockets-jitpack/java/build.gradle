plugins {
    id 'java'
    id 'application'
    id 'idea'

    // Creates fat JAR
    id 'com.github.johnrengelman.shadow' version '6.0.0'

    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.29.0'
}

def gradleDependencyVersion = '6.5'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

mainClassName = 'com.awslabs.aws.iot.websockets.Example'

distZip.enabled = shadowDistZip.enabled = false
distTar.enabled = shadowDistTar.enabled = false

// Specify all of our dependency versions
def awsIotCoreWebsockets = '0.8.1'
def junitVersion = '4.13'
def awaitilityVersion = '4.0.3'

group = 'com.awslabs.aws.iot.websockets.jitpack.Example'
version = '1.0-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "com.github.awslabs:aws-iot-core-websockets:$awsIotCoreWebsockets"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.awaitility:awaitility:$awaitilityVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
