plugins {
    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.21.0'
}

def gradleDependencyVersion = '5.4.1'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'idea'

mainClassName = 'not-applicable'

// Specify all of our dependency versions
def slf4jVersion = '1.7.26'
def awsSdkVersion = '1.11.568'
def junitVersion = '4.12'
def guavaVersion = '28.0-jre'

group = 'com.awslabs.aws.iot.resultsiterator'
version = '0.1'

description = """"""

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
}

dependencies {
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "com.amazonaws:aws-java-sdk-core:$awsSdkVersion"
    compile "com.google.guava:guava:$guavaVersion"

    testCompile "junit:junit:$junitVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
